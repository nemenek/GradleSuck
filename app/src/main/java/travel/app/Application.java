/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package travel.app;

import travel.persistence.FileDataStore;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;

import travel.domain.Attraction;
import travel.domain.*;
import travel.app.view.*;
import travel.service.TravelService;
import travel.service.AuthenticationException;
import travel.service.DefaultTravelService;
import travel.service.Statistics;

public class Application {
    private final FileDataStore dataStore = new FileDataStore("../data");
    
    private View view = new ConsolView();
    
    private TravelService service = new DefaultTravelService(dataStore);
    
    public Application() {
    	run();
    }

    private void run() {
        dataStore.loadData();
        if (this.service.getLoggedInUser() == null) {
        	do {
        		view.Display("Travel Application Login\n");
            	view.Display("Please enter your credentials.");
            	String username = view.getStringInput("Login name: ");
            	String pwd = view.getStringInput("Password: ");
            	try {
            		this.service.setLoggedInUser(this.service.authenticateUser(new Credentials().setPassword(pwd).setUsername(username)));
            	}catch (AuthenticationException e) {
            		this.view.Display("Login failure, bye.\n\n");
            		this.service.setLoggedInUser(null);
				}
        	} while(this.service.getLoggedInUser() == null);
        	this.view.Display("Login successful.\n");
        	
        	Statistics stats = this.service.getStatistics();
        	
        	this.view.Display(String.format("Welcome %s. Your role: %s\n", this.service.getLoggedInUser().getFullName(), this.service.getLoggedInUser().getRole().toString()));
        	this.view.Display("Application statistics:");
        	this.view.Display(String.format("Number of destinations: %d", stats.getNumberOfDestinations()));
        	this.view.Display(String.format("Number of attractions: %d", stats.getNumberOfAttractions()));
        	this.view.Display(String.format("Number of users: %d", stats.getNumberOfUsers()));
        	this.view.Display(String.format("Number of reviews: %d", stats.getNumberOfAllReviews()));
        	
        	if(this.service.getLoggedInUser().getRole() == Role.USER) {
        		this.view.Display(String.format("Number of your visits: %d", stats.getNumberOfUserVisits()));
        		this.view.Display(String.format("Number of reviews you wrote: %d", stats.getNumberOfUserWrittenReviews()));
        	}
        	
        	Menu();
        	
        	this.dataStore.storeData();
        	this.view.Display("Data has been saved");
        }
    }

    private void Menu() {
    	int answer;
    	boolean quit = false;
    	do {
    		answer = -1;
    		this.view.Display("\nTravel Application main menu.");
    		this.view.Display("1. View Destinations and Attractions");
    		this.view.Display("2. View Reviews");
    		if(this.service.getLoggedInUser().getRole() == Role.USER) {
    			this.view.Display("3. View my Trips");
    			this.view.Display("4. Create Trip");
    		}
    		else {
    			view.Display("3. Add Attraction");
    		}
    		this.view.Display(String.format("%s Quit application\n", this.service.getLoggedInUser().getRole() == Role.USER ? "5." : "4."));
    		answer = Integer.valueOf(this.view.getStringInput("Please choose an item:"));
    		List<Destination> destinations = this.service.getDestinations();
    		switch(answer) {
    		case 1:
    			this.view.Display("Destinations and Attraction details:");
    			for(Destination dest : destinations) {
    				this.view.Display(String.format("- %s, %s", dest.getName(), dest.getCountry()));
    				for(Attraction attr : dest.getAttractions()) {
    					this.view.Display(String.format("\t- name: %s", attr.getName()));
    					this.view.Display(String.format("\t  description: %s", attr.getDescription()));
    					this.view.Display(String.format("\t  category: %s", attr.getCategory().toString()));
    				}
    			}
    			break;
    		case 2:
    			List<Attraction> attractions = new ArrayList<>();
    			int idx = 1;
    			for(Destination dest : destinations) {
    				for(Attraction attr : dest.getAttractions()) {
    					if(!attractions.stream().anyMatch(x -> x.getId() == attr.getId())) {
    						attractions.add(attr);
    						this.view.Display(String.format("%d. %s (%s)", idx, attr.getName(), dest.getName()));
    						idx++;
    					}
    				}
    			}
    			idx = Integer.valueOf(this.view.getStringInput("Please select:"));
    			String name = null;
    			for(Destination dest : destinations) {
    				for(Attraction attr : dest.getAttractions()) {
    					if(attr.getId() == attractions.get(idx-1).getId()) {
    						name = dest.getName();
    						break;
    					}
    				}
    			}
    			this.view.Display(String.format("\nReviews for %s (%s)", attractions.get(idx-1).getName(), name));
    			List<Review> reviews = this.service.getReviews(attractions.get(idx-1).getId());
    			for(Review item : reviews) {
    				this.view.Display(String.format("- reviewer: %s", item.getUser().getFullName()));
    				this.view.Display(String.format("  rating: %d", item.getRating()));
    				this.view.Display(String.format("  comment: %s", item.getComment()));
    			}
    			break;
    		case 3:
    			//admin case
    			if(this.service.getLoggedInUser().getRole() == Role.ADMIN) {
    				idx = 1;
        			this.view.Display("List of Destinations:");
        			for(Destination dest : destinations) {
        				this.view.Display(String.format("%d. %s (%s)", idx, dest.getName(), dest.getCountry()));
        				idx++;
        			}
        			
        			idx = Integer.valueOf(this.view.getStringInput("Please select:"));
        			
        			//get all attraction ID
        			List<Long> attractionIds = new ArrayList<>();
        			for(Destination dest : destinations) {
        				for(Attraction attr : dest.getAttractions()) {
        					if(!attractionIds.stream().anyMatch(x -> x == attr.getId())) {
        						attractionIds.add(attr.getId());
        					}
        				}
        			}
        			
        			//get attraction details
        			Destination dest = destinations.get(idx - 1);
        			
        			this.view.Display("Please enter new attraction details.");
        			String Attrname = this.view.getStringInput("name: ");
        			
        			String description = this.view.getStringInput("description: ");
        			
        			Category cat = null;
        			boolean quitLoop = true;
        			do {
        				String category = this.view.getStringInput("category: ");
        				try {
            				cat = Category.valueOf(category.toUpperCase());	
            			}catch(IllegalArgumentException e) {
            				this.view.Display("Unknown category");
            				quitLoop = true;
            			}
        			} while(!quitLoop);
        			
        			long Id = attractionIds.stream().max(Long::compare).get();
        			++Id;
        			this.service.createAttraction(dest.getId(), new Attraction().setCategory(cat).setDescription(description).setName(Attrname).setId(Id));
    			}
    			//user case
    			else {
    				this.view.Display("Query Trips");
    				try {
    					LocalDate startDate = LocalDate.parse(this.view.getStringInput("Enter start date:"));
        				LocalDate endDate = LocalDate.parse(this.view.getStringInput("Enter end date:"));
        				if(startDate.isAfter(endDate)) {
        					this.view.Display("Start date must be before end date.");
        				}
        				else {
        					this.view.Display("\nList of Visits in the given range");
        					List<Trip> filteredTrips = this.service.getTrips(startDate, endDate);
            				for(Trip trip: filteredTrips) {
            					this.view.Display(String.format("- %s [%s, %s]", trip.getDestination().getName(), trip.getStartDate().toString(), trip.getEndDate().toString()));
            				}
        				}
    				}catch(DateTimeParseException e) {
    					this.view.Display("Entered date is invalid. Correct date format: YYYY-MM-DD");
    				}
    			}
    			break;
    		case 4:
    			if(this.service.getLoggedInUser().getRole() == Role.USER) {
    				this.view.Display("Create Trip");
        			this.view.Display("Destinations:");
        			idx = 1;
        			for(Destination dest : destinations) {
        				this.view.Display(String.format("%d. %s", idx, dest.getName()));
        				++idx;
        			}
        			List<Long> tripIds = new ArrayList<>();
        			for(Trip trip : this.service.getTrips()) {
        				tripIds.add(trip.getId());
        			}
        			long id = tripIds.stream().max(Long::compare).get();
        			++id;
        			idx = Integer.valueOf(this.view.getStringInput("Please choose destomatopm to create Trip:"));
        			LocalDate startDate = LocalDate.parse(this.view.getStringInput("Enter trip start date:"));
        			LocalDate endDate = LocalDate.parse(this.view.getStringInput("Enter trip end date:"));
        			this.service.createTrip(new Trip().setDestination(destinations.get(idx - 1))
        					.setId(id).setUser(this.service.getLoggedInUser())
        					.setStartDate(startDate).setEndDate(endDate).setVisits(new ArrayList<>()));
        			this.view.Display("Trip has been created.");
    			}
    			else {
    				quit = true;
    			}
    			break;
    		case 5:
    			quit = true;
    			break;
    		default:
    			view.Display("Invalid menu item id");
    			answer = -1;
    		}
    	}while(!quit);
    	this.view.Display("Travel application quit");
    }
}
